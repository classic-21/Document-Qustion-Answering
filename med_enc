{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9975515,"sourceType":"datasetVersion","datasetId":6137702}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"%pip install -U -q \"google-generativeai>=0.8.3\" chromadb PyPDF2","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:07:00.457196Z","iopub.execute_input":"2024-11-21T18:07:00.457593Z","iopub.status.idle":"2024-11-21T18:07:13.192015Z","shell.execute_reply.started":"2024-11-21T18:07:00.457555Z","shell.execute_reply":"2024-11-21T18:07:13.190498Z"}},"outputs":[{"name":"stdout","text":"Note: you may need to restart the kernel to use updated packages.\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"import google.generativeai as genai\nfrom IPython.display import Markdown","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:07:18.917528Z","iopub.execute_input":"2024-11-21T18:07:18.918012Z","iopub.status.idle":"2024-11-21T18:07:18.923825Z","shell.execute_reply.started":"2024-11-21T18:07:18.917967Z","shell.execute_reply":"2024-11-21T18:07:18.922686Z"}},"outputs":[],"execution_count":8},{"cell_type":"code","source":"from kaggle_secrets import UserSecretsClient\n\nGOOGLE_API_KEY = UserSecretsClient().get_secret(\"GOOGLE_API_KEY\")\ngenai.configure(api_key=GOOGLE_API_KEY)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:07:19.145002Z","iopub.execute_input":"2024-11-21T18:07:19.145390Z","iopub.status.idle":"2024-11-21T18:07:19.459459Z","shell.execute_reply.started":"2024-11-21T18:07:19.145354Z","shell.execute_reply":"2024-11-21T18:07:19.458209Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"for m in genai.list_models():\n    if 'embedContent' in m.supported_generation_methods:\n        print(m.name)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:07:19.461143Z","iopub.execute_input":"2024-11-21T18:07:19.461448Z","iopub.status.idle":"2024-11-21T18:07:20.298962Z","shell.execute_reply.started":"2024-11-21T18:07:19.461417Z","shell.execute_reply":"2024-11-21T18:07:20.297694Z"}},"outputs":[{"name":"stdout","text":"models/embedding-001\nmodels/text-embedding-004\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"import os\nimport kagglehub\n\ndef count_subfiles(folder_path):\n    total_files = 0\n    for root, dirs, files in os.walk(folder_path):\n        total_files += len(files)\n    return total_files\n\n# Example usage:\ndataset_path = kagglehub.dataset_download('classicpsy/med-enc')\ntotal_files = count_subfiles(dataset_path)\nprint(f\"Total number of subfiles in the folder: {total_files}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:07:20.301103Z","iopub.execute_input":"2024-11-21T18:07:20.301579Z","iopub.status.idle":"2024-11-21T18:07:21.650864Z","shell.execute_reply.started":"2024-11-21T18:07:20.301526Z","shell.execute_reply":"2024-11-21T18:07:21.649372Z"}},"outputs":[{"name":"stdout","text":"Total number of subfiles in the folder: 1\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"from PyPDF2 import PdfReader\n\ndef extract_text_from_pdf_directory(folder_path):\n    \n    extracted_texts = {}\n    \n    for root, dirs, files in os.walk(folder_path):\n        for file in files:\n            if file.endswith(\".pdf\"):\n                pdf_path = os.path.join(root, file)\n                try:\n                    reader = PdfReader(pdf_path)\n                    text = \"\"\n                    for page in reader.pages:\n                        if page.extract_text():\n                            text += page.extract_text()\n                    extracted_texts[file] = text\n                except Exception as e:\n                    print(f\"Error reading {file}: {e}\")\n    \n    return extracted_texts\n\n# Example usage:\npdf_texts = extract_text_from_pdf_directory(dataset_path)\n\n# Print extracted text for each PDF\nfor filename, text in pdf_texts.items():\n    print(f\"--- {filename} ---\")\n    print(text[:500])  # Print the first 500 characters of the text\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:07:21.652247Z","iopub.execute_input":"2024-11-21T18:07:21.652628Z","iopub.status.idle":"2024-11-21T18:08:12.265526Z","shell.execute_reply.started":"2024-11-21T18:07:21.652564Z","shell.execute_reply":"2024-11-21T18:08:12.264273Z"}},"outputs":[{"name":"stdout","text":"--- Gale Encyclopedia of Medicine Vol. 4 (N-S).pdf ---\nTheGALE\nENCYCLOPEDIA\nofMEDICINE\nSECOND EDITIONTheGALE\nENCYCLOPEDIA\nofMEDICINE\nSECOND EDITION\nJACQUELINE L. LONGE, EDITOR\nDEIRDRE S. BLANCHFIELD, ASSOCIATE EDITOR\nVOLUME\nN-S4STAFF\nJacqueline L. Longe, Project Editor\nDeirdre S. Blanchfield, Associate Editor\nChristine B. Jeryan, Managing Editor\nDonna Olendorf, Senior Editor\nStacey Blachford, Associate Editor\nKate Kretschmann, Melissa C. McDade, Ryan\nThomason, Assistant Editors\nMark Springer, Technical Specialist\nAndrea Lopeman, Programmer/Analyst\nB\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"document = []\n\nfor filename, text in pdf_texts.items():\n    document.append(text)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-11-21T18:12:57.028172Z","iopub.execute_input":"2024-11-21T18:12:57.028721Z","iopub.status.idle":"2024-11-21T18:12:57.034193Z","shell.execute_reply.started":"2024-11-21T18:12:57.028679Z","shell.execute_reply":"2024-11-21T18:12:57.033020Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"from chromadb import Documents, Embeddings, EmbeddingFunction\nfrom google.api_core import retry\n\nclass GeminiEmbeddingFunction(EmbeddingFunction):\n    document_mode = True\n\n    def __call__(self, input:Documents)->Embeddings:\n        if self.document_mode:\n            embedding_task = 'retrieval_document'\n        else:\n            embedding_task = 'retrieval_query'\n\n        retry_policy = {'retry':retry.Retry(predicate=retry.if_transient_error)}\n\n        response = genai.embed_content(\n            model = \"models/text-embedding-004\",\n            content = input,\n            task_type = embedding_task,\n            request_options\n        )","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}